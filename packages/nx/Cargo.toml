[package]
name = 'nx'
version.workspace = true
edition.workspace = true
license.workspace = true

[lib]
crate-type = ['cdylib']


[dependencies]
nx_core = { workspace = true }
nx_glob = { workspace = true }
nx_walker = { workspace = true }
nx_db = { workspace = true }
nx_hasher = { workspace = true }
nx_logger = { workspace = true }
nx_pty = { workspace = true }
nx_tasks = { workspace = true }
nx_workspace = { workspace = true }
nx_project_graph = { workspace = true }
nx_cache = { workspace = true }
nx_terminal = { workspace = true }
nx_watch = { workspace = true }
nx_utils = { workspace = true }
anyhow = { workspace = true }
crossbeam-channel = { workspace = true }
dashmap = { workspace = true }
dunce = { workspace = true }
fs_extra = { workspace = true }
hashbrown = { workspace = true }
ignore = { workspace = true }
itertools = { workspace = true }
parking_lot = { workspace = true }
napi = { workspace = true }
napi-derive = { workspace = true }
regex = { workspace = true }
rayon = { workspace = true }
rkyv = { workspace = true }
thiserror = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
xxhash-rust = { workspace = true }
swc_common = { workspace = true }
swc_ecma_parser = { workspace = true }
swc_ecma_ast = { workspace = true }

[target.'cfg(windows)'.dependencies]
winapi = { workspace = true }

[target.'cfg(all(not(windows), not(target_family = "wasm")))'.dependencies]
mio = { workspace = true }


[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
portable-pty = { workspace = true }
crossterm = { workspace = true }
ignore-files = { workspace = true }
fs4 = { workspace = true }
rusqlite = { workspace = true }
watchexec = { workspace = true }
watchexec-events = { workspace = true }
watchexec-filterer-ignore = { workspace = true }
watchexec-signals = { workspace = true }
machine-uid = { workspace = true }


[build-dependencies]
napi-build = { workspace = true }

[dev-dependencies]
assert_fs = { workspace = true }
# This is only used for unit tests
swc_ecma_dep_graph = { workspace = true }
tempfile = { workspace = true }
# We only explicitly use tokio for async tests
tokio = { workspace = true }
